name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm run install:all

    - name: Lint server
      run: cd server && npm run lint

    - name: Lint client
      run: cd client && npm run lint

    - name: Run server tests
      run: cd server && npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/writory-test
        JWT_ACCESS_SECRET: test-access-secret
        JWT_REFRESH_SECRET: test-refresh-secret

    - name: Build client
      run: cd client && npm run build

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm run install:all

    - name: Run security audit
      run: |
        cd server && npm audit --audit-level moderate
        cd ../client && npm audit --audit-level moderate

  docker:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Docker build
      run: |
        docker-compose build
        docker-compose up -d mongodb
        sleep 10
        docker-compose down